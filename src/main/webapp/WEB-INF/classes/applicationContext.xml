<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	   http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>

    <!--  ------作用域  start----------->
    <!-- 自定义作用域 -->
	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
		<property name="scopes">
			<map>
				<entry key="thread">
					<bean class="com.hiya.ee.spring.bean.CustomThreadScope" />
				</entry>
			</map>
		</property>
	</bean>

    <!-- 各类作用域 -->
	<bean id="beanSingleton" class="com.hiya.ee.spring.bean.BeanSingletonScope" scope="singleton" />
	<bean id="beanPrototype" class="com.hiya.ee.spring.bean.BeanPrototypeScope" scope="prototype" />
	<bean id="beanPrototype" class="com.hiya.ee.spring.bean.BeanRequestScope" scope="request" />
	<bean id="beanPrototype" class="com.hiya.ee.spring.bean.BeanSessionScope" scope="session" />
	<bean id="beanPrototype" class="com.hiya.ee.spring.bean.BeanGlobalSessionScope" scope="globalSession" />
	<bean id="beanPrototype" class="com.hiya.ee.spring.bean.BeanThreadScope" scope="thread" />
	 <!--  ------作用域  end----------->
	 
	 
	
	<!-- 无参构造函数+setter方法注入值 -->
	<bean class="com.hiya.ee.spring.ioc.PersonNonCons" id="personNonCons">
	    <property name="id" value="3"></property>
        <property name="name" value="wade"></property>
    </bean>
    
    <!-- 利用有参构造函数直接注入-->
  <bean class="com.hiya.ee.spring.ioc.PersonCons" id="personCons">
        <constructor-arg name="id" value="3"></constructor-arg>
        <constructor-arg name="name" value="wade"></constructor-arg>
    </bean>
    
    <!-- 使用静态工厂方法创建Bean -->
    <bean id="personCons2" class="com.hiya.ee.spring.ioc.PersonStaticFactory" factory-method="createConsPerson"></bean>
    <bean id="personNonCons2" class="com.hiya.ee.spring.ioc.PersonStaticFactory" factory-method="createNonConsPerson"></bean>
   
    <!-- 通过工厂方法创建 -->
    <bean id="personFactory" class="com.hiya.ee.spring.ioc.PersonFactory"></bean>
    <bean id="personCons3"  factory-bean="personFactory"   factory-method="createPersonConsInstance"></bean>
    <bean id="personNonCons3"   factory-bean="personFactory"  factory-method="createPersonNonConsInstance"></bean>
    
    
    <bean id="logService" class="com.hiya.ee.spring.aop.LogServiceImpl"></bean>
	<bean id="loginService" class="com.hiya.ee.spring.aop.LoginServiceImpl"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.hiya.ee.spring.aop.LoginServiceImpl.*(..))" id="myPointcut" />
		<aop:aspect id="dd" ref="logService">
			 <aop:before method="log" pointcut-ref="myPointcut" /> 
			 <aop:after method="logArg" pointcut-ref="myPointcut"> 
		 	<aop:after-returning method="logArgAndReturn" returning="returnObj" pointcut-ref="myPointcut" />
		</aop:aspect>
	</aop:config>
    
    
    
</beans>

